https://leetcode.com/problems/palindrome-linked-list/description/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {

private:

    int getLength(ListNode *head) {
        int count = 0;
        ListNode *p = head;
        while(p) {
            count++;
            p = p -> next;
        }
        return count;
    }

public:
    bool isPalindrome(ListNode* head) {
        if(head == NULL || head -> next == NULL) {
            return true;
        }
        int count = getLength(head);
        count = (count % 2 == 0) ? (count / 2) - 1 : (count / 2);               
        ListNode *q = head;        
        while(count) {            
            q = q -> next;
            count--;           
        }          
        ListNode *r = q -> next, *prev = NULL;
        q -> next = NULL;
        q = r;
        r = r -> next;        
        while(q) {
            q -> next = prev;
            prev = q;
            q = r;
            if(r) {r = r -> next;}            
        }      
        ListNode *p = head;
        while(prev) {
            if(p -> val != prev -> val) {
                return false;
            }
            p = p -> next;
            prev = prev -> next;
        }
        return true;





        // vector<int> v1;
        // ListNode *p = head;
        // while(p) {
        //     v1.push_back(p -> val);
        //     p = p -> next;
        // }        
        // int i = 0, j = v1.size() - 1;
        // while(i <= j) {
        //     if(v1[i++] != v1[j--]) {
        //         return false;
        //     }
        // }
        // return true;
    }
};