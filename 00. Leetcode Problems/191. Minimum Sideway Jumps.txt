https://leetcode.com/problems/minimum-sideway-jumps

----brute-------
class Solution {
public:
    int solve(vector<int>& obstacles, int currLane, int currPos) {
        if(currPos == obstacles.size() - 1) {
            return 0;
        }

        if(obstacles[currPos + 1] != currLane) {
            return solve(obstacles, currLane, currPos + 1);
        }
        else {
            int ans = INT_MAX;
            for(int i = 1; i <= 3; i++) {
                if(currLane != i && obstacles[currPos] != i) {
                    ans = min(ans, 1 + solve(obstacles, i, currPos));
                }
            }
            return ans;
        }
    }
    int minSideJumps(vector<int>& obstacles) {
        return solve(obstacles, 2, 0);
    }
};

-----memoisation-------
class Solution {
public:
    int solve(vector<int>& obstacles, int currLane, int currPos, vector<vector<int>> &dp) {
        if(currPos == obstacles.size() - 1) {
            return 0;
        }
        if(dp[currLane][currPos] != -1) {
            return dp[currLane][currPos];
        }
        if(obstacles[currPos + 1] != currLane) {
            dp[currLane][currPos] = solve(obstacles, currLane, currPos + 1, dp);
        }
        else {
            int ans = INT_MAX;
            for(int i = 1; i <= 3; i++) {
                if(currLane != i && obstacles[currPos] != i) {
                    ans = min(ans, 1 + solve(obstacles, i, currPos, dp));
                }
            }
            dp[currLane][currPos] = ans;
        }
        return dp[currLane][currPos];
    }
    int minSideJumps(vector<int>& obstacles) {
        vector<vector<int>> dp(4, vector<int> (obstacles.size(), -1));
        return solve(obstacles, 2, 0, dp);
    }
};

----------tabulation-------
class Solution {
public:
    int minSideJumps(vector<int>& obstacles) {
        int n = obstacles.size() - 1;
        vector<vector<int>> dp(4, vector<int> (obstacles.size(), 1e9));
        for(int i = 0; i < 4; i++) {
            dp[i][n] = 0;
        }
        for(int currPos = n - 1; currPos >= 0; currPos--) {
            for(int currLane = 1; currLane <= 3; currLane++) {
                if(obstacles[currPos + 1] != currLane) {
                    dp[currLane][currPos] = dp[currLane][currPos + 1];
                }
                else {
                    int ans = 1e9;
                    for(int i = 1; i <= 3; i++) {
                        if(currLane != i && obstacles[currPos] != i) {
                            ans = min(ans, 1 + dp[i][currPos + 1]);
                        }
                    }
                    dp[currLane][currPos] = ans;
                }
            }
        }
        return min(dp[2][0], min(dp[1][0] + 1, dp[3][0] + 1));
    }
};