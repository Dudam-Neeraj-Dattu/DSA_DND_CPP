https://www.geeksforgeeks.org/problems/strongly-connected-components-kosarajus-algo/1

{
	public:
	//Function to find number of strongly connected components in the graph.
	void scc(int node, vector<int> revAdj[], vector<int> &visited) {
	    visited[node] = 1;
	    for(int i : revAdj[node]) {
	        if(!visited[i]) {
	           scc(i, revAdj, visited, count);
	        }
	    }
	}
	
	void dfs(int node, vector<vector<int>> &adj, vector<int> &visited, stack<int> &s) {
	    visited[node] = 1;
	    for(auto i : adj[node]) {
	        if(!visited[i]) {
	            dfs(i, adj, visited, s);
	        }
	    }
	    s.push(node);
	}
    int kosaraju(int V, vector<vector<int>>& adj)
    {
        //code here
        stack<int> s;
        vector<int> visited(V, 0);
        for(int i = 0; i < V; i++) {
            if(!visited[i]) {
                dfs(i, adj, visited, s);
            }
        }
        vector<int> revAdj[V];
        for(int i = 0; i < V; i++) {
            visited[i] = 0;
            for(int j : adj[i]) {
                revAdj[j].push_back(i);   
            }
        }
        int count = 0;
        while(!s.empty()) {
            int top = s.top();
            s.pop();
            if(!visited[top]) {
                count++;
                scc(top, revAdj, visited);
            }
        }
        return count;
        
    }
};