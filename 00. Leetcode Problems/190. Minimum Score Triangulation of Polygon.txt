https://leetcode.com/problems/minimum-score-triangulation-of-polygon

----brute-------
#include <bits/stdc++.h> 

int solve(vector<int> &arr, int i, int j) {
	if(abs(j - i) < 2) {
		return 0;
	}
	int ans = INT_MAX;
	for(int k = i + 1; k < j; k++) {
		ans = min(arr[i] * arr[j] * arr[k] + solve(arr, i, k) + solve(arr, k, j), ans);
	}	
	return ans;
}

int minimumTriangleScore(vector<int> &arr, int n){
	// Write your code here.	
	return solve(arr, 0, n - 1);
}

----memoisation------
class Solution {
public:
    int solve(vector<int>& arr, int i, int j, vector<vector<int>>& dp) {
        if (abs(j - i) < 2) {
            return 0;
        }
        if (dp[i][j] != -1) {
            return dp[i][j];
        }
        int ans = INT_MAX;
        for (int k = i + 1; k < j; k++) {
            ans = min(arr[i] * arr[j] * arr[k] + solve(arr, i, k, dp) +
                          solve(arr, k, j, dp),
                      ans);
        }
        dp[i][j] = ans;
        return ans;
    }

    int minScoreTriangulation(vector<int>& arr) {
        int n = arr.size();
        vector<vector<int>> dp(n, vector<int>(n, -1));
        return solve(arr, 0, n - 1, dp);
    }
};
-------tabulation------
class Solution {
public:
    int minScoreTriangulation(vector<int>& arr) {
        int n = arr.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = n - 1; i >= 0; i--) {
            for (int j = i + 2; j < n; j++) {
                int ans = INT_MAX;
                for (int k = i + 1; k < j; k++) {
                    ans = min(arr[i] * arr[j] * arr[k] + dp[i][k] + dp[k][j],
                              ans);
                }
                dp[i][j] = ans;
            }
        }
        return dp[0][n - 1];
    }
};