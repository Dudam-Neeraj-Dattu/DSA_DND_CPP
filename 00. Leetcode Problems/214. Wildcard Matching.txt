https://leetcode.com/problems/wildcard-matching

-----------brute---------
class Solution {
public:

    bool solve(string &s, string &p, int i, int j) {
        if(i < 0 && j < 0) return true;
        if(i >= 0 && j < 0) return false;
        if(i < 0 && j >= 0) {
            while(j--) {
                if(p[j] != '*') {
                    return false;
                }
            }
            return true;
        }

        int ans = false;
        if(s[i] == p[j] || p[j] == '?') {
            ans = ans || solve(s, p, i - 1, j - 1);
        }
        else if(p[j] == '*') {
            ans = ans || solve(s, p, i - 1, j) || solve(s, p, i, j - 1);
        }
        return ans;
    }

    bool isMatch(string s, string p) {
        int l1 = s.length(), l2 = p.length();
        return solve(s, p, l1 - 1, l2 - 1);
    }
};

--------------memoisation-------------
class Solution {
public:

    bool solve(string &s, string &p, int i, int j, vector<vector<int>> &dp) {
        if(i < 0 && j < 0) return true;
        if(i >= 0 && j < 0) return false;
        if(i < 0 && j >= 0) {
            for(int k = 0; k <= j; k++) {
                if(p[k] != '*') {
                    return false;
                }
            }
            return true;
        }
        if(dp[i][j] != -1) return dp[i][j];

        bool ans = false;
        if(s[i] == p[j] || p[j] == '?') {
            ans = ans || solve(s, p, i - 1, j - 1, dp);
        }
        else if(p[j] == '*') {
            ans = ans || solve(s, p, i - 1, j, dp) || solve(s, p, i, j - 1, dp);
        }
        return dp[i][j] = ans;
    }

    bool isMatch(string s, string p) {
        int l1 = s.length(), l2 = p.length();
        vector<vector<int>> dp(l1, vector<int> (l2, -1));
        return solve(s, p, l1 - 1, l2 - 1, dp);
    }
};

----------tabulation------------
class Solution {
public:
    bool isMatch(string s, string p) {
        int l1 = s.length(), l2 = p.length();
        vector<vector<bool>> dp(l1 + 1, vector<bool>(l2 + 1, false));
        dp[0][0] = true;
        for (int j = 1; j <= l2; j++) {
            bool flag = true;
            for(int k = 1; k <= j; k++) {
                if (p[k - 1] != '*') {
                    flag = false;
                    break;
                }
            }    
            dp[0][j] = flag;        
        }
        for(int i = 1; i <= l1; i++) {
            for(int j = 1; j <= l2; j++) {
                dp[i][j] = false;
                if (s[i - 1] == p[j - 1] || p[j - 1] == '?') {
                    dp[i][j] = dp[i - 1][j - 1];
                } 
                else if (p[j - 1] == '*') {
                    dp[i][j] = dp[i - 1][j] || dp[i][j - 1];
                }
            }
        }
        return dp[l1][l2];
    }
};

------------space optimiseated---------------
class Solution {
public:
    bool isMatch(string s, string p) {
        int l1 = s.length(), l2 = p.length();
        int l = max(l1, l2);
        vector<bool> curr(l + 1, false);
        vector<bool> prev(l + 1, false);
        prev[0] = true;
        for (int j = 1; j <= l2; j++) {
            bool flag = true;
            for(int k = 1; k <= j; k++) {
                if (p[k - 1] != '*') {
                    flag = false;
                    break;
                }
            }    
            prev[j] = flag;        
        }
        for(int i = 1; i <= l1; i++) {
            for(int j = 1; j <= l2; j++) {
                curr[j] = false;
                if (s[i - 1] == p[j - 1] || p[j - 1] == '?') {
                    curr[j] = prev[j - 1];
                } 
                else if (p[j - 1] == '*') {
                    curr[j] = prev[j] || prev[j - 1];
                }
            }
            prev = curr;
        }
        return prev[l2];
    }
};