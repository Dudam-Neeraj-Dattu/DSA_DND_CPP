https://leetcode.com/problems/longest-palindromic-subsequence

-----------brute-----------
class Solution {
public:
    int solve(string &s, int index1, int index2) {
        if(index1 == s.length() || index2 < 0) {
            return 0;
        }
        int ans = 0;
        if(s[index1] == s[index2]) {
            ans = 1 + solve(s, index1 + 1, index2 - 1);
        }
        else {
            ans = max(solve(s, index1 + 1, index2), solve(s, index1, index2 - 1));
        }
        return ans;
    }

    int longestPalindromeSubseq(string s) {
        int l = s.length();
        return solve(s, 0, l - 1);
    }
};

-------memoisation----------
class Solution {
public:
    int solve(string &s, int index1, int index2, vector<vector<int>> &dp) {
        if(index1 == s.length() || index2 < 0) return 0;
        if(dp[index1][index2] != -1) return dp[index1][index2];
        int ans = 0;
        if(s[index1] == s[index2]) {
            ans = 1 + solve(s, index1 + 1, index2 - 1, dp);
        }
        else {
            ans = max(solve(s, index1 + 1, index2, dp), solve(s, index1, index2 - 1, dp));
        }
        return dp[index1][index2] = ans;
    }

    int longestPalindromeSubseq(string s) {
        int l = s.length();
        vector<vector<int>> dp(l, vector<int> (l, -1));
        return solve(s, 0, l - 1, dp);
    }
};

----------tabulation-----------
class Solution {
public:
    int longestPalindromeSubseq(string s) {
        int l = s.length();
        vector<vector<int>> dp(l + 2, vector<int> (l + 2, 0));
        for(int index1 = l - 1; index1 >= 0; index1--) {
            for(int index2 = 1; index2 <= l; index2++) {
                int ans = 0;
                if(s[index1] == s[index2 - 1]) {
                    ans = 1 + dp[index1 + 1][index2 - 1];
                }
                else {
                    ans = max(dp[index1 + 1][index2], dp[index1][index2 - 1]);
                }
                dp[index1][index2] = ans;
            }
        }
        return dp[0][l];
    }
};

--------------space optimiseated------------
class Solution {
public:
    int longestPalindromeSubseq(string s) {
        int l = s.length();
        vector<int> curr(l + 2, 0);
        vector<int> next(l + 2, 0);
        for(int index1 = l - 1; index1 >= 0; index1--) {
            for(int index2 = 1; index2 <= l; index2++) {
                int ans = 0;
                if(s[index1] == s[index2 - 1]) {
                    ans = 1 + next[index2 - 1];
                }
                else {
                    ans = max(next[index2], curr[index2 - 1]);
                }
                curr[index2] = ans;
            }
            next = curr;
        }
        return next[l];
    }
};