https://leetcode.com/problems/longest-common-subsequence

---------------brute-----------
class Solution {
public:
    int solve(string &s1, string &s2, int index1, int index2) {
        if(index1 == s1.length() || index2 == s2.length()) {
            return 0;
        }      
        int both = 0, first = 0, second = 0;  
        if(s1[index1] == s2[index2]) {
            both = 1 + solve(s1, s2, index1 + 1, index2 + 1);
        }

        first = solve(s1, s2, index1 + 1, index2);
        second = solve(s1, s2, index1, index2 + 1);
        return max(both, max(first, second));
    }

    int longestCommonSubsequence(string text1, string text2) {
        return solve(text1, text2, 0, 0);
    }
};

------------memoisation----------
class Solution {
public:
    int solve(string &s1, string &s2, int index1, int index2, vector<vector<int>> &dp) {
        if(index1 == s1.length() || index2 == s2.length()) return 0;      
        if(dp[index1][index2] != -1) return dp[index1][index2];
        int both = 0, first = 0, second = 0;  
        if(s1[index1] == s2[index2]) {
            both = 1 + solve(s1, s2, index1 + 1, index2 + 1, dp);
        }

        first = solve(s1, s2, index1 + 1, index2, dp);
        second = solve(s1, s2, index1, index2 + 1, dp);
        return dp[index1][index2] = max(both, max(first, second));
    }

    int longestCommonSubsequence(string text1, string text2) {
        vector<vector<int>> dp(text1.length(), vector<int> (text2.length(), -1));
        return solve(text1, text2, 0, 0, dp);
    }
};

--------------tabulation-------------
class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int l1 = text1.length(), l2 = text2.length();
        vector<vector<int>> dp(l1 + 1, vector<int>(l2 + 1, 0));                                     
        for (int index1 = l1 - 1; index1 >= 0; index1--) {
            for (int index2 = l2 - 1; index2 >= 0; index2--) {
                int ans = 0;
                if (text1[index1] == text2[index2]) {
                    ans = max(ans, 1 + dp[index1 + 1][index2 + 1]);
                }

                ans = max(ans, dp[index1 + 1][index2]);
                ans = max(ans, dp[index1][index2 + 1]);
                dp[index1][index2] = ans;
            }
        }
        return dp[0][0];
    }
};

-------------spce optimiseated------------
class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int l1 = text1.length(), l2 = text2.length();
        int l = max(l1, l2);
        vector<int> curr(l + 1, 0);
        vector<int> next(l + 1, 0);                                     
        for (int index1 = l1 - 1; index1 >= 0; index1--) {
            for (int index2 = l2 - 1; index2 >= 0; index2--) {
                int ans = 0;
                if (text1[index1] == text2[index2]) {
                    ans = max(ans, 1 + next[index2 + 1]);
                }
                ans = max(ans, next[index2]);
                ans = max(ans, curr[index2 + 1]);
                curr[index2] = ans;
            }
            next = curr;
        }
        return next[0];
    }
};

----------final--------------
class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int l1 = text1.length(), l2 = text2.length();
        int l = max(l1, l2);
        vector<int> curr(l + 1, 0);
        vector<int> next(l + 1, 0);                                     
        for (int index1 = l1 - 1; index1 >= 0; index1--) {
            for (int index2 = l2 - 1; index2 >= 0; index2--) {                             
                curr[index2] = (text1[index1] == text2[index2]) ? 1 + next[index2 + 1] : max(next[index2], curr[index2 + 1]);
            }
            next = curr;
        }
        return next[0];
    }
};