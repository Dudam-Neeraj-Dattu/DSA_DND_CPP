https://leetcode.com/problems/number-of-dice-rolls-with-target-sum

--------memoisation-------
#define MOD 1000000007
class Solution {
public:
    int solve(int n, int k, int target, vector<vector<int>> &dp) {
        if(n == 0) {
            return (target == 0) ? 1 : 0;
        }
        if(target < 0) {
            return 0;
        }
        if(dp[n][target] != -1) {
            return dp[n][target];
        }
        int ways = 0;
        for(int i = 1; i <= k; i++) {
            ways = (ways + (solve(n - 1, k, target - i, dp) % 1000000007)) % 1000000007;            
        }
        dp[n][target] = ways % 1000000007;
        return dp[n][target];
    }
    int numRollsToTarget(int n, int k, int target) {
        vector<vector<int>> dp(n + 1, vector<int> (target + 1, -1));
        return solve(n, k, target, dp);
    }
};

-------tabulation---------
class Solution {
public:
    int numRollsToTarget(int n, int k, int target) {
        vector<vector<int>> dp(n + 1, vector<int> (target + 1, 0));
        dp[0][0] = 1;
        for(int i = 1; i <= n; i++) {
            for(int t = 1; t <= target; t++) {
                int ways = 0;
                for(int j = 1; j <= k; j++) {
                    if(t - j >= 0) {
                        ways = (ways + (dp[i - 1][t - j] % 1000000007)) % 1000000007;
                    }                    
                }
                dp[i][t] = ways;
            }
        }
        return dp[n][target];
    }
};

-------space opimistaion--------
class Solution {
public:
    int numRollsToTarget(int n, int k, int target) {
        vector<int> dp(target + 1, 0);
        dp[0] = 1;
        const int MOD = 1000000007;

        for (int i = 1; i <= n; i++) {
            vector<int> temp(target + 1, 0);
            for (int t = 1; t <= target; t++) {
                for (int j = 1; j <= k; j++) {
                    if (t - j >= 0) {
                        temp[t] = (temp[t] + dp[t - j]) % MOD;
                    }
                }
            }
            dp = temp;
        }

        return dp[target];
    }
};
