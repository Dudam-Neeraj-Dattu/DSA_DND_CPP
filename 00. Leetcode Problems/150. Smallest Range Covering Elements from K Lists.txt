https://leetcode.com/problems/smallest-range-covering-elements-from-k-lists/description/

class Solution {
public:

    void minmaxFinder(vector<int> &minmax, vector<int> &index, vector<vector<int>>& nums) {
        for(int i = 0; i < index.size(); i++) {
            int value = nums[i][index[i]];
            if(value < minmax[0]) {
                minmax[0] = value;
                minmax[1] = i;
                minmax[2] = index[i];
            }
            if(value > minmax[3]) {
                minmax[3] = value;
                minmax[4] = i;
                minmax[5] = index[i];
            }
        }
    }

    vector<int> smallestRange(vector<vector<int>>& nums) {
        vector<int> index(nums.size(), 0);
        vector<int> minmax(6);
        minmax[0] = INT_MAX;
        minmax[3] = INT_MIN;
        vector<int> ans(2);
        ans[0] = -1000000;
        ans[1] = 1000000;
        while(true) {
            minmaxFinder(minmax, index, nums);
            if(minmax[3] - minmax[0] < ans[1] - ans[0]) {
                ans[0] = minmax[0];
                ans[1] = minmax[3];
            }                      
            if(index[minmax[1]] + 1 == nums[minmax[1]].size()) {
                break;
            }
            else {
                index[minmax[1]]++;
                minmax[2] = index[minmax[1]];
                minmax[0] = nums[minmax[1]][minmax[2]];
            }            
        }
        return ans;
    }
};