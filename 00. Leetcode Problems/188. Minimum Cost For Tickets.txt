https://leetcode.com/problems/minimum-cost-for-tickets

-----my code (mem)------

class Solution {
public:

    int getNextIndex(vector<int> &days, int maxPassDay, int start) {
        int i = start, j = days.size() - 1;
        while(i <= j) {
            int mid = (i + j) / 2;
            if(days[mid] <= maxPassDay) {
                i = mid + 1;
            }
            else if(days[mid] > maxPassDay) {
                j = mid - 1;
            }
        }        
        return i;
    }

    int solve(vector<int> &days, vector<int> &costs, int index, unordered_map<int, int> &u, vector<vector<int>> &dp) {
        if(index == days.size()) {
            return 0;
        }
        int ans = INT_MAX;
        for(int i = 0; i < 3; i++) {           
            int nextIndex = getNextIndex(days, days[index] + u[i], index + 1);
            if(dp[nextIndex][i] == -1) {
                dp[nextIndex][i] = solve(days, costs, nextIndex, u, dp);                
            }
            ans = min(ans, costs[i] + dp[nextIndex][i]);
        }
        return ans;
    }

    int mincostTickets(vector<int>& days, vector<int>& costs) {
        int ans = INT_MAX;
        unordered_map<int, int> u = {{0, 0}, {1, 6}, {2, 29}};
        vector<vector<int>> dp(days.size() + 1, vector<int> (3, -1));
        return solve(days, costs, 0, u, dp);
    }
};


-------gpt code-----
class Solution {
public:
    int getNextIndex(vector<int>& days, int maxPassDay, int start) {
        int i = start, j = days.size() - 1;
        while (i <= j) {
            int mid = (i + j) / 2;
            if (days[mid] <= maxPassDay) {
                i = mid + 1;
            } else {
                j = mid - 1;
            }
        }
        return i;
    }

    int solve(vector<int>& days, vector<int>& costs, int index, vector<int>& dp) {
        if (index >= days.size()) {
            return 0;
        }
        if (dp[index] != -1) {
            return dp[index];
        }

        // Try each ticket option
        int ans = INT_MAX;
        int nextIndex;

        // 1-day pass
        nextIndex = getNextIndex(days, days[index], index + 1);
        ans = min(ans, costs[0] + solve(days, costs, nextIndex, dp));

        // 7-day pass
        nextIndex = getNextIndex(days, days[index] + 6, index + 1);
        ans = min(ans, costs[1] + solve(days, costs, nextIndex, dp));

        // 30-day pass
        nextIndex = getNextIndex(days, days[index] + 29, index + 1);
        ans = min(ans, costs[2] + solve(days, costs, nextIndex, dp));

        dp[index] = ans;
        return ans;
    }

    int mincostTickets(vector<int>& days, vector<int>& costs) {
        vector<int> dp(days.size(), -1);
        return solve(days, costs, 0, dp);
    }
};
