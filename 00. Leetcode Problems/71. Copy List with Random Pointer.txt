https://leetcode.com/problems/copy-list-with-random-pointer/description/

/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(head == NULL) {
            return head;
        }        
        Node *nHead = new Node(head->val);        
        Node *p = head -> next, *copyHead = nHead;
        while(p) {
            Node *temp = new Node(p->val);            
            nHead -> next = temp;
            nHead = temp;
            p = p -> next;
        }

        //Approach2
        unordered_map<Node*, Node*> u;
        p = copyHead;
        Node *original = head;
        while(p) {
            u[original] = p;
            p = p -> next;
            original = original -> next;
        }

        p = copyHead, original = head;
        while(p) {
            p -> random = u[original -> random];
            p = p -> next;
            original = original -> next;
        }
        return copyHead;


        //Approach 1
        // Node *p1 = copyHead;
        // Node *q1 = head;
        // while(q1) {
        //     Node *p2 = copyHead, *q2 = head;       
        //     if(q1 -> random) {                
        //         while(q2 != q1 -> random) {
        //             q2 = q2 -> next;
        //             p2 = p2 -> next;
        //         }
        //         p1 -> random = p2;
        //         q1 = q1 -> next;
        //         p1 = p1 -> next;
        //     }
        //     else {
        //         q1 = q1 -> next;
        //         p1 = p1 -> next;    
        //     }            
        // }
        // return copyHead;
    }
};