https://www.geeksforgeeks.org/problems/topological-sort/1

class Solution
{
	public:
	//Function to return list containing vertices in Topological order. 
	void topo(vector<int> &visited, vector<int> adj[], stack<int> &s, int node) {
	    visited[node] = 1;
	    for(int i : adj[node]) {
	        if(!visited[i]) {
	            topo(visited, adj, s, i);
	        }
	    }
	    s.push(node);
	}
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    // code here
	    vector<int> visited(V, 0);
	    stack<int> s;
	    for(int i = 0; i < V; i++) {
	        if(!visited[i]) {
	            topo(visited, adj, s, i);
	        }
	    }
	    vector<int> ans;
	    while(!s.empty()) {
	        ans.push_back(s.top());
	        s.pop();
	    }
	    return ans;
	}
};

--------approach 2---------
class Solution
{
	public:
	//Function to return list containing vertices in Topological order. 
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    // code here
	    vector<int> inDegree(V, 0);
	    for(int i = 0 ; i < V; i++) {
	        for(int j : adj[i]) {
	            inDegree[j]++;
	        }
	    }
	    
	    queue<int> q;
	    for(int i = 0; i < V; i++) {
	        if(inDegree[i] == 0) {
	            q.push(i);
	        }
	    }
	    
	    vector<int> ans;
	    while(!q.empty()) {
	        int front = q.front();
	        q.pop();
	        
	        ans.push_back(front);
	        
	        for(int i : adj[front]) {
	            inDegree[i]--;
	            if(inDegree[i] == 0) {
	                q.push(i);
	            }
	        }
	    }
	    return ans;
	}
};