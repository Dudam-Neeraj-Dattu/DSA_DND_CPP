https://www.geeksforgeeks.org/problems/dearrangement-of-balls0918/1

https://youtu.be/ZcYI6ZVsu2w?si=bTIsLBlFbpPWkNAV

---------brute force--------n * n!
class Solution {
  private:
    bool valid(vector<int> &v) {
        for(int i = 0; i < v.size(); i++) {
            if(v[i] == i + 1) {
                return false;
            }
        }
        return true;
    }
    
    void solve(vector<int> &v, int index, int &ans) {
        if(index == v.size()) {
            if(valid(v)) {
                ans++;
            }
            return;
        }
        for(int i = index; i < v.size(); i++) {
            swap(v[i], v[index]);
            solve(v, index + 1, ans);
            swap(v[i], v[index]);
        }
    }
  public:
    int countDer(int n) {
        vector<int> v(n);
        for(int i = 0; i < n; i++) {
            v[i] = i + 1;
        }
        int ans = 0;
        solve(v, 0, ans);
        return ans;
    }
};

----------recursive-------
class Solution {
  public:
    int countDer(int n) {
        if(n <= 1) return 0;
        if(n == 2) return 1;
        return (n - 1) * (countDer(n - 2) + countDer(n - 1));
    }
};


---------memoisation------
long long int solve(int n, vector<long long int> &dp) {
    if(n <= 1) return 0;
    if(n == 2) return 1;
    if(dp[n] != -1) return dp[n];
    dp[n] = (((n - 1)%MOD) * (((solve(n - 2, dp)%MOD) + (solve(n - 1, dp)%MOD))%MOD)%MOD);
    return dp[n];
}


long long int countDerangements(int n) {
    // Write your code here.
    vector<long long int> dp(n + 1, -1);
    return solve(n, dp);
}