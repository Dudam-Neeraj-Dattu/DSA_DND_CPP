https://leetcode.com/problems/perfect-squares

------recursive----
class Solution {
  public:
    void solve(vector<int> &v, int n, int t, int &ans) {
        if(n == 0) {
            ans = min(ans, t);
            return;
        }
        for(int i = 0; i < v.size(); i++) {
            if(n - v[i] >= 0) {
                solve(v, n - v[i], t + 1, ans);
            }
            else{
                break;
            }            
        }
    }
    int MinSquares(int n) {
        // Code here
        vector<int> v;
        int i = 1;
        while(i * i < n) {
            v.push_back(i * i);
            i++;
            if(i * i == n) {
                return 1;
            }
        }       
        // cout << v.size();
        int ans = n, t = 0; 
        solve(v, n, t, ans);
        return ans;
    }
};

-------memoisation----------
class Solution {
  public:
    int solve(int n, vector<int> &dp) {
        if(n == 0) return 0;
        if(dp[n] != -1) return dp[n];
        int ans = INT_MAX;
        for(int i = 1; i * i <= n; i++) {
            ans = min(ans, solve(n - i * i, dp));
        }
        dp[n] = ans + 1;
        return dp[n];
    }
    int MinSquares(int n) {
        // Code here
        vector<int> dp(n + 1, -1);
        return solve(n, dp);
    }
};

----------tabulation----------
class Solution {
public:
    int numSquares(int n) {
        vector<int> dp(n + 1, INT_MAX);
        dp[0] = 0;
        for(int i = 1; i <= n; i++) {
            for(int j = 1; j * j <= i; j++) {
                dp[i] = min(dp[i], (dp[i - j * j] + 1));
            }
        }
        return dp[n];
    }
};