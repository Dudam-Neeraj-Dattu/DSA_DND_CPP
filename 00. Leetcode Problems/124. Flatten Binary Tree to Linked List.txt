https://leetcode.com/problems/flatten-binary-tree-to-linked-list/description/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void preorder(TreeNode *root, vector<int> &v) {
        if(root == NULL) {
            return;
        }

        v.push_back(root -> val);
        preorder(root -> left, v);
        preorder(root -> right, v);
    }

    void buildTree(TreeNode *root, vector<int> v, int index) {
        if(index == v.size()) {
            return;
        }
        TreeNode *temp = new TreeNode(v[index]);
        root -> right = temp; 
        root = temp;  
        // index++;     
        buildTree(root, v, index + 1);
    }

    void flatten(TreeNode* root) {
        if(root == NULL || (root -> left == NULL && root -> right == NULL)) {
            return;
        }

        vector<int> v;
        preorder(root, v);
        root -> left = NULL;
        root -> right = NULL;

        int index = 0;

        buildTree(root, v, index + 1);
    }
};