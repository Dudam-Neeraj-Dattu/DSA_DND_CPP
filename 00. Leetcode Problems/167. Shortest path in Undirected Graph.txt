https://www.geeksforgeeks.org/problems/shortest-path-in-undirected-graph-having-unit-distance/1

class Solution {
  public:
    vector<int> shortestPath(vector<vector<int>>& edges, int N,int M, int src){
        // code here
        vector<int> adj[N];
        for(int i = 0; i < M; i++) {
            adj[edges[i][0]].push_back(edges[i][1]);
            adj[edges[i][1]].push_back(edges[i][0]);
        }
        
        vector<int> ans(N, 0), visited(N, 0) ;
        queue<pair<int, int>> q;
        q.push(make_pair(src, 0));
        visited[src] = 1;
        while(!q.empty()) {
            pair<int, int> p = q.front();
            q.pop();
            for(int i : adj[p.first]) {
                if(!visited[i]) {
                    visited[i] = 1;
                    ans[i] = p.second + 1;
                    q.push(make_pair(i, ans[i]));
                }
            }
        }
        for(int i = 0; i < N; i++) {
            if(i != src && ans[i] == 0) {
                ans[i] = -1;
            }
        }
        return ans;
        
    }
};