https://leetcode.com/problems/find-the-length-of-the-longest-common-prefix/description/?envType=daily-question&envId=2024-09-24

class TrieNode {
    public:
        char ch;
        TrieNode *children[10];
        bool isTerminal;
    
    public:
        TrieNode(char ch) {
            this -> ch = ch;
            for(int i = 0; i < 10; i++) {
                this -> children[i] = NULL;
            }
            this -> isTerminal = false;
        }
};

class Trie {
    public:
        TrieNode *root;

    public:
        Trie() {
            root = new TrieNode('\0');
        }

        void insertWordUtil(TrieNode *root, string word) {
            if(word.length() == 0) {
                root -> isTerminal = true;
                return;
            }

            int index = word[0] - '0';
            TrieNode *child;

            if(root -> children[index]) {
                child = root -> children[index];
            }
            else {
                child = new TrieNode(word[0]);
                root -> children[index] = child;
            }

            insertWordUtil(child, word.substr(1));
        }
        void insertWord(string word) {
            insertWordUtil(root, word);
        }

        int prefixFinderUtil(TrieNode *root, string word, int length) {
            if(word.length() == 0) {
                return length;
            }

            int index = word[0] - '0';
            TrieNode *child;
            if(root -> children[index]) {
                child = root -> children[index];
            }
            else {
                return length;
            }
            length++;
            return prefixFinderUtil(child, word.substr(1), length);
        }

        int prefixFinder(string word) {
            return prefixFinderUtil(root, word, 0);
        }
};

class Solution {
public:

    int longestCommonPrefix(vector<int>& arr1, vector<int>& arr2) {
        int prefixLength = 0;
        Trie *t = new Trie();
        for(int i : arr2) {
            t -> insertWord(to_string(i));
        }
        for(int i : arr1) {
            prefixLength = max(prefixLength, t -> prefixFinder(to_string(i)));
        }

        return prefixLength;
        
    }
};