https://leetcode.com/problems/edit-distance

-----------brute----------
class Solution {
public:

    int solve(string &word1, string &word2, int index1, int index2) {
        if(index1 == word1.length() || index2 == word2.length()) {\
            if(index1 < word1.length()) {
                return (word1.length() - index1);
            }
            else if(index2 < word2.length()) {
                return (word2.length() - index2);
            }
            return 0;
        }
        int replace = INT_MAX, noReplace = INT_MAX, deleteC = INT_MAX, insert = INT_MAX; 
        if(word1[index1] != word2[index2]) {
            replace = 1 + solve(word1, word2, index1 + 1, index2 + 1);
        }        
        else {
            noReplace = solve(word1, word2, index1 + 1, index2 + 1);
        }
        deleteC = 1 + solve(word1, word2, index1 + 1, index2);
        insert = 1 + solve(word1, word2, index1, index2 + 1, dp);
        return min(min(replace, insert), min(noReplace, deleteC));
    }

    int minDistance(string word1, string word2) {        
        return solve(word1, word2, 0, 0);
    }
};

---------memoisation------------
class Solution {
public:
    int solve(string& word1, string& word2, int index1, int index2,
              vector<vector<int>>& dp) {
        if (index1 == word1.length()) {
            return (word2.length() - index2);
        } 
        if (index2 == word2.length()) {
            return (word1.length() - index1);
        }
        if (dp[index1][index2] != -1) {
            return dp[index1][index2];
        }
        int replace = INT_MAX, noReplace = INT_MAX, deleteC = INT_MAX,
            insert = INT_MAX;
        if (word1[index1] != word2[index2]) {
            replace = 1 + solve(word1, word2, index1 + 1, index2 + 1, dp);
            deleteC = 1 + solve(word1, word2, index1 + 1, index2, dp);
            insert = 1 + solve(word1, word2, index1, index2 + 1, dp);
        } else {
            noReplace = solve(word1, word2, index1 + 1, index2 + 1, dp);
        }
        return dp[index1][index2] =
                   min(min(replace, insert), min(noReplace, deleteC));
    }

    int minDistance(string word1, string word2) {
        int l1 = word1.length(), l2 = word2.length();
        vector<vector<int>> dp(l1, vector<int>(l2, -1));

        return solve(word1, word2, 0, 0, dp);
    }
};

--------------tabulation------------
class Solution {
public:
    int minDistance(string word1, string word2) {
        int l1 = word1.length(), l2 = word2.length();
        vector<vector<int>> dp(l1 + 1, vector<int>(l2 + 1, 0));
        for(int index2 = 0; index2 <= l2; index2++) {
            dp[l1][index2] = l2 - index2;
        }
        for(int index1 = 0; index1 <= l1; index1++) {
            dp[index1][l2] = l1 - index1;
        }
        for(int index1 = l1 - 1; index1 >= 0; index1--) {
            for(int index2 = l2 - 1; index2 >= 0; index2--) {
                if(word1[index1] != word2[index2]) {
                    dp[index1][index2] = min(1 + dp[index1 + 1][index2 + 1], min(1 + dp[index1 + 1][index2], 1 + dp[index1][index2 + 1]));
                }
                else {
                    dp[index1][index2] = dp[index1 + 1][index2 + 1];
                }
            }
        }
        return dp[0][0];
    }
};

------------space optimiseated------------
class Solution {
public:
    int minDistance(string word1, string word2) {
        int l1 = word1.length(), l2 = word2.length();
        if(l1 == 0) return l2;
        if(l2 == 0) return l1;
        int l = max(l1, l2);
        vector<int> curr(l + 1, 0);
        vector<int> next(l + 1, 0);
        for(int index2 = 0; index2 <= l2; index2++) {
            next[index2] = l2 - index2;
        }
        for(int index1 = l1 - 1; index1 >= 0; index1--) {
            for(int index2 = l2 - 1; index2 >= 0; index2--) {
                curr[word2.length()] = word1.length() - index1;
                if(word1[index1] != word2[index2]) {
                    curr[index2] = min(1 + next[index2 + 1], min(1 + next[index2], 1 + curr[index2 + 1]));
                }
                else {
                    curr[index2] = next[index2 + 1];
                }
            }
            next = curr;
        }
        return next[0];
    }
};

