https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii

------brute----------
class Solution {
public:

    int solve(vector<int> &prices, int index, int buy) {
        if(index == prices.size()) return 0;

        int profit = 0;
        if(buy) {
            int bought = -prices[index] + solve(prices, index + 1, 0);
            int skipped = solve(prices, index + 1, 1);
            profit = max(bought, skipped);
        }
        else {
            int sold = prices[index] + solve(prices, index + 1, 1);
            int skipped = solve(prices, index + 1, 0);
            profit = max(sold, skipped);
        }
        return profit;
    }

    int maxProfit(vector<int>& prices) {
        return solve(prices, 0, 1);
    }
};

-----------memoisation-------------
class Solution {
public:

    int solve(vector<int> &prices, int index, int buy, vector<vector<int>> &dp) {
        if(index == prices.size()) return 0;
        if(dp[index][buy] != -1) return dp[index][buy];
        int profit = 0;
        if(buy) {
            int bought = -prices[index] + solve(prices, index + 1, 0, dp);
            int skipped = solve(prices, index + 1, 1, dp);
            profit = max(bought, skipped);
        }
        else {
            int sold = prices[index] + solve(prices, index + 1, 1, dp);
            int skipped = solve(prices, index + 1, 0, dp);
            profit = max(sold, skipped);
        }
        return dp[index][buy] = profit;
    }

    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<int>> dp(n, vector<int> (2, -1));
        return solve(prices, 0, 1, dp);
    }
};

----------tabulation-----------
class Solution {
public:

    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<int>> dp(n + 1, vector<int>(2, 0));
        for (int index = n - 1; index >= 0; index--) {
            for (int buy = 0; buy <= 1; buy++) {
                int profit = 0;
                if (buy) {
                    int bought =
                        -prices[index] + dp[index + 1][0];
                    int skipped = dp[index + 1][1];
                    profit = max(bought, skipped);
                } else {
                    int sold = prices[index] + dp[index + 1][1];
                    int skipped = dp[index + 1][0];
                    profit = max(sold, skipped);
                }
                dp[index][buy] = profit;
            }
        }
        return dp[0][1];
    }
};

-----------space optimiseated--------
class Solution {
public:

    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<int>> dp(n + 1, vector<int>(2, 0));
        vector<int> curr(2, 0);
        vector<int> next(2, 0);
        for (int index = n - 1; index >= 0; index--) {
            for (int buy = 0; buy <= 1; buy++) {
                int profit = 0;
                if (buy) {
                    int bought =
                        -prices[index] + next[0];
                    int skipped = next[1];
                    profit = max(bought, skipped);
                } else {
                    int sold = prices[index] + next[1];
                    int skipped = next[0];
                    profit = max(sold, skipped);
                }
                curr[buy] = profit;
            }
            next = curr;
        }
        return next[1];
    }
};


-----------most optimised----------
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int ans = 0;
        for(int i = 1; i < prices.size(); i++) {
            if(prices[i] >= prices[i - 1]) {                
                ans += (prices[i] - prices[i - 1]);
            }
        }
        return ans;
    }
};