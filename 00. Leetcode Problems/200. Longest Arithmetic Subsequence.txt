https://leetcode.com/problems/longest-arithmetic-subsequence

-----brutest brute---------
class Solution {
public:

    bool valid(vector<int> &ans) {
        int d = 0;
        if(ans.size() >= 2) {
            d = ans[1] - ans[0];
        }
        for(int i = 2; i < ans.size(); i++) {
            if(ans[i] - ans[i - 1] != d) {
                return false;
            }
        }
        return true;
    }

    int solve(vector<int>& nums, int index, vector<int>& ans) {
        if(index == nums.size()) {
            if(valid(ans)) {
                return ans.size();
            }
            return 0;
        }
        int include = 0, exclude = 0;
        exclude = solve(nums, index + 1, ans);
        ans.push_back(nums[index]);
        include = solve(nums, index + 1, ans);
        ans.pop_back();
        return max(include, exclude);
    }

    int longestArithSeqLength(vector<int>& nums) {
        vector<int> ans;
        return solve(nums, 0, ans);
    }
};

-------brute2-----------
class Solution {
public:
    int longestArithSeqLength(vector<int>& nums) {
        unordered_set<int> u;
        vector<vector<int>> v;
        for(int i : nums) {
            u.insert(i);
        }
        for(int i = 0; i < nums.size() - 2; i++) {
            vector<int> temp;
            for(int j = i + 1; j < nums.size(); j++) {
                temp.push_back(nums[j] - nums[i]);
            }
            v.push_back(temp);
        }
        int ans = 2;
        for(int i = 0; i < v.size(); i++) {
            for(int j = 0; j < v[i].size(); j++) {
                int count = 1;
                int next = nums[i] + v[i][j];
                while(next >= 0 && u.count(next)) {
                    count++;
                    next += v[i][j];
                }
                if(count == v[i].size() + 1) {
                    return count;
                }
                ans = max(ans, count);
            }
        }
        return ans;
    }
};

-----brute3----------
class Solution {
public:

    int solve(vector<int> &nums, int d, int index, int a2) {
        if(index < 0) {
            return 0;
        }
        int a1 = nums[index];
        int count = 0;
        if(a2 - a1 == d) {
            count = 1 + solve(nums, d, index - 1, a1);
        }
        else {
            count = solve(nums, d, index - 1, a2);
        }
        return count;
    }

    int longestArithSeqLength(vector<int>& nums) {
        int ans = 2;
        for(int i = 0; i < nums.size() - 1; i++) {
            for(int j = i + 1; j < nums.size(); j++) {
                int d = nums[j] - nums[i];
                ans = max(ans, 2 + solve(nums, d, i - 1, nums[i]));
            }
        }
        return ans;
    }
};
----memoisation1-------
class Solution {
public:

    int solve(vector<int> &nums, int d, int index, int a2) {
        if(index < 0) {
            return 0;
        }
        int a1 = nums[index];
        int count = 0;
        if(a2 - a1 == d) {
            count = 1 + solve(nums, d, index - 1, a1);
        }
        else {
            count = solve(nums, d, index - 1, a2);
        }
        return count;
    }

    int longestArithSeqLength(vector<int>& nums) {
        int ans = 2;
        vector<unordered_map<int, int>> dp(nums.size());
        for(int i = 0; i < nums.size() - 1; i++) {
            for(int j = i + 1; j < nums.size(); j++) {
                int d = nums[j] - nums[i];
                int count = 0;
                if(dp[i].count(d)) {
                    count = dp[i][d];
                }
                else {
                    count = solve(nums, d, i - 1, nums[i]);
                    dp[i][d] = count;
                }
                ans = max(ans, 2 + count);
            }
        }
        return ans;
    }
};

-----memoisation2-----------
class Solution {
public:

    int solve(vector<int> &nums, int d, int index, vector<unordered_map<int, int>> &dp) {
        if(index < 0) {
            return 0;
        }
        if(dp[index].count(d)) return dp[index][d];
        int a2 = nums[index];
        int ans = 0;
        for(int i = index - 1; i >= 0; i--) {
            int a1 = nums[i];
            if(a2 - a1 == d) {
                ans = max(ans, 1 + solve(nums, d, i, dp));
            }
        }
        return dp[index][d] = ans;
    }

    int longestArithSeqLength(vector<int>& nums) {
        int ans = 2;
        vector<unordered_map<int, int>> dp(nums.size());
        for(int i = 0; i < nums.size() - 1; i++) {
            for(int j = i + 1; j < nums.size(); j++) {
                int d = nums[j] - nums[i];
                ans = max(ans, 2 + solve(nums, d, i, dp));
            }
        }
        return ans;
    }
};

------------tabulation0---------
class Solution {
public:
    int longestArithSeqLength(vector<int>& nums) {
        int ans = 2;
        vector<unordered_map<int, int>> dp(nums.size());
        for(int i = 1; i < nums.size(); i++) {
            for(int j = 0; j < i; j++) {
                int d = nums[i] - nums[j];
                int count = 1;
                if(dp[j].count(d)) {
                    count = dp[j][d];
                }                
                dp[i][d] = 1 + count;                
                ans = max(ans, dp[i][d]);
            }
        }
        return ans;
    }
};

