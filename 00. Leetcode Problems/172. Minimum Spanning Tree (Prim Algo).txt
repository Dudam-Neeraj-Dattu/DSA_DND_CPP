https://www.geeksforgeeks.org/problems/minimum-spanning-tree/1

-----without parent-------
class Solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        // code here
        vector<int> cost(V, INT_MAX);
        vector<int> inMst(V, 0);
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> p;
        p.push(make_pair(0, 0));
        cost[0] = 0;
        while(!p.empty()) {
            pair<int, int> top = p.top();
            p.pop();
            int node = top.second;
            int weight = top.first;
            inMst[node] = 1;
            for (vector<int> i : adj[node]) {
                if(!inMst[i[0]] && i[1] < cost[i[0]]) {
                    cost[i[0]] = i[1];
                    p.push(make_pair(i[1], i[0]));
                }
            }
        }
        int sum = 0;
        for(int i : cost) {
            sum += i;
        }
        return sum;
    }
};

---------with parent----------
class Solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        // code here
        vector<int> cost(V, INT_MAX);
        vector<int> inMst(V, 0);
        vector<int> parent(V, -1);
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> p;
        p.push(make_pair(0, 0));
        cost[0] = 0;
        while(!p.empty()) {
            pair<int, int> top = p.top();
            p.pop();
            int node = top.second;
            int weight = top.first;
            inMst[node] = 1;
            for (vector<int> i : adj[node]) {
                if(!inMst[i[0]] && i[1] < cost[i[0]]) {
                    cost[i[0]] = i[1];
                    parent[i[0]] = node;
                    p.push(make_pair(i[1], i[0]));
                }
            }
        }
        int sum = 0;
        for(int i : cost) {
            // cout << i << " ";
            sum += i;
        }
        return sum;
    }
};