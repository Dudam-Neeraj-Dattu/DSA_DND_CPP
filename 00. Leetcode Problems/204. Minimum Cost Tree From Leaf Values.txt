https://leetcode.com/problems/minimum-cost-tree-from-leaf-values

------brute-------
class Solution {
public:

    int solve(vector<int> &arr, map<pair<int, int>, int> &maxi, int left, int right) {
        if(left == right) {
            return 0;
        }
        int ans = INT_MAX;
        for(int i = left; i < right; i++) {
            ans = min(ans, maxi[{left, i}] * maxi[{i + 1, right}] + solve(arr, maxi, left, i) + solve(arr, maxi, i + 1, right));
        }
        return ans;
    }

    int mctFromLeafValues(vector<int>& arr) {
        map<pair<int, int>, int> maxi;
        for(int i = 0; i < arr.size(); i++) {
            maxi[{i, i}] = arr[i];
            for(int j = i + 1; j < arr.size(); j++) {
                maxi[{i, j}] = max(arr[j], maxi[{i, j - 1}]);
            }
        }
        return solve(arr, maxi, 0, arr.size() - 1);
    }
};

----------------memoisation-----------
class Solution {
public:

    int solve(vector<int> &arr, map<pair<int, int>, int> &maxi, int left, int right, vector<vector<int>> &dp) {
        if(left == right) {
            return 0;
        }
        if(dp[left][right] != -1)  {
            return dp[left][right];
        }
        int ans = INT_MAX;
        for(int i = left; i < right; i++) {
            ans = min(ans, maxi[{left, i}] * maxi[{i + 1, right}] + solve(arr, maxi, left, i, dp) + solve(arr, maxi, i + 1, right, dp));
        }
        return dp[left][right] = ans;
    }

    int mctFromLeafValues(vector<int>& arr) {
        map<pair<int, int>, int> maxi;
        for(int i = 0; i < arr.size(); i++) {
            maxi[{i, i}] = arr[i];
            for(int j = i + 1; j < arr.size(); j++) {
                maxi[{i, j}] = max(arr[j], maxi[{i, j - 1}]);
            }
        }
        int n = arr.size();
        vector<vector<int>> dp(n, vector<int> (n, -1));
        return solve(arr, maxi, 0, arr.size() - 1, dp);
    }
};

------------tabulation------------
class Solution {
public:
    int mctFromLeafValues(vector<int>& arr) {
        map<pair<int, int>, int> maxi;
        for (int i = 0; i < arr.size(); i++) {
            maxi[{i, i}] = arr[i];
            for (int j = i + 1; j < arr.size(); j++) {
                maxi[{i, j}] = max(arr[j], maxi[{i, j - 1}]);
            }
        }
        int n = arr.size();
        vector<vector<int>> dp(n + 2, vector<int>(n, 0));
        for (int left = n - 1; left >= 0; left--) {
            for (int right = 0; right < n; right++) {
                int ans = INT_MAX;
                for (int i = left; i < right; i++) {
                    ans = min(ans, maxi[{left, i}] * maxi[{i + 1, right}] +
                                       dp[left][i] +
                                       dp[i + 1][right]);
                }
                dp[left][right] = (ans == INT_MAX) ? 0 : ans;
            }
        }
        return dp[0][n - 1];
    }
};