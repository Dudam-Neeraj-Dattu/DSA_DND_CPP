https://leetcode.com/problems/unique-binary-search-trees

-----brute------------
class Solution {
public:
    int solve(int n) {
        if(n == 0 || n == 1) return 1;
        int left = 0, right = n - 1;
        int count = 0;
        while(left < n && right >= 0) {
            count += solve(left) * solve(right);
            left++;
            right--;
        }
        return count;
    }
    int numTrees(int n) {
        
        return solve(n);
    }
};

-----memoisation--------
class Solution {
public:
    int solve(int n, vector<int> &dp) {
        if(n == 0 || n == 1) return 1;
        if(dp[n] != -1) return dp[n];
        int left = 0, right = n - 1;
        int count = 0;
        while(left < n && right >= 0) {
            count += solve(left, dp) * solve(right, dp);
            left++;
            right--;
        }
        return dp[n] = count;
    }
    int numTrees(int n) {
        vector<int> dp(n + 1, -1);
        return solve(n, dp);
    }
};

-------tabulation---------
class Solution {
public:
    int numTrees(int n) {
        vector<int> dp(n + 1, 0);
        dp[0] = dp[1] = 1;
        for (int i = 2; i <= n; ++i) {
            for (int j = 1; j <= i; ++j) {
                dp[i] += dp[j - 1] * dp[i - j];
            }
        }
        return dp[n];
    }
};
