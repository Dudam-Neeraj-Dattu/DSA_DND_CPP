https://www.geeksforgeeks.org/problems/detect-cycle-in-a-directed-graph/1

class Solution {
  public:
    // Function to detect cycle in a directed graph.
    bool isCycledfs(int node, vector<int> &visited, vector<int> &dfsVisited, vector<int> adj[]) {
        visited[node] = 1;
        dfsVisited[node] = 1;
        // cout << node << endl;
        for(int i : adj[node])  {
            // cout << node << " " << i << endl;
            if(!visited[i]) { 
                bool detect = isCycledfs(i, visited, dfsVisited, adj);
                if(detect) {
                    return true;
                }
            } 
            else if(dfsVisited[i]) {
                return true;
            }
        }
        dfsVisited[node] = 0;
        return false;
    }
    
    bool isCyclic(int V, vector<int> adj[]) {
        // code here
        vector<int> visited(V, 0), dfsVisited(V, 0);
        // for(int i = 0; i < V; i++) {
        //     cout << i << " -> ";
        //     sort(adj[i].begin(), adj[i].end());
        //     for(int j = 0; j < adj[i].size(); j++) {
        //         cout << adj[i][j] << " ";
        //     }cout << endl;
        // }
        for(int i = 0; i < V; i++) {
            if(!visited[i]) {
                // cout << i << endl;
                bool detect = isCycledfs(i, visited, dfsVisited, adj);
                if(detect) {
                    return true;
                }
            }
        }
        return false;
    }
};