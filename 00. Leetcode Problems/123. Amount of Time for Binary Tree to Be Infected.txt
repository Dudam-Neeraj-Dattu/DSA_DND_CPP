https://leetcode.com/problems/amount-of-time-for-binary-tree-to-be-infected/solutions/3748774/c-dfs-simple/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    TreeNode* mapping(TreeNode* root, map<TreeNode *, TreeNode *> &m, int target, map<TreeNode *, bool> &visited) {
        TreeNode *found;
        queue<TreeNode *> q;
        q.push(root);
        visited[root] = false;
        m[root] = NULL;
        while(!q.empty()) {
            if(q.front() -> val == target) {
                found = q.front();
            }
            
            if(q.front() -> left) {
                m[q.front() -> left] = q.front();
                visited[q.front() -> left] = false;
                q.push(q.front() -> left);
            }
            
            if(q.front() -> right) {
                m[q.front() -> right] = q.front();
                visited[q.front() -> right] = false;
                q.push(q.front() -> right);
            }
            q.pop();
        }
        
        return found;
    }

    int amountOfTime(TreeNode* root, int start) {
        map<TreeNode *, TreeNode *> m;
        map<TreeNode *, bool> visited;
        TreeNode *found;
        found = mapping(root, m, start, visited);
        queue<TreeNode *> q;
        int stepcount = 0, count = 0;
        if(m[found]) {
            q.push(m[found]);
            stepcount++;
        }
        if(found -> left) {
            q.push(found -> left);
            stepcount++;
        }
        if(found -> right) {
            q.push(found -> right);
            stepcount++;
        }
        visited[found] = true;
        while(!q.empty()) {
            int queue_count = 0;
            while(stepcount) {
                if(m[q.front()] && !visited[m[q.front()]]) {
                    q.push(m[q.front()]);
                    queue_count++;
                }
                if(q.front() -> left) {
                    if(!visited[q.front() -> left]) {
                        q.push(q.front() -> left);
                        queue_count++;   
                    }
                }
                if(q.front() -> right) {
                    if(!visited[q.front() -> right]) {
                        q.push(q.front() -> right);
                        queue_count++;   
                    }
                }
                stepcount--;
                visited[q.front()] = true;
                q.pop();
            }
            stepcount = queue_count;
            count++;
        }
        return count;
    }
};