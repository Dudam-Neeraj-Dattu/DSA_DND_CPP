https://leetcode.com/problems/coin-change

-------recusion----------
class Solution {
public:
    int solve(vector<int>& coins, int amount) {
        if (amount == 0) {
            return 0;
        }
        if(amount < 0) {
            return INT_MAX;
        }
        int mini = INT_MAX;
        for (int i : coins) {
            int ans = solve(coins, amount - i);
            if (ans != INT_MAX) {
                mini = min(mini, 1 + ans);
            }
        }
        return mini;
    }

    int coinChange(vector<int>& coins, int amount) {
        int mini = INT_MAX;
        mini = solve(coins, amount);
        return (mini == INT_MAX) ? -1 : mini;
    }
};

---------recursion + memoisation---------
class Solution {
public:
    int solve(vector<int>& coins, int amount, vector<int>& dp) {
        if (amount == 0) {
            return 0;
        }        
        if (amount < 0) {
            return INT_MAX;
        }
        if(dp[amount] != -1) {
            return dp[amount];
        }
        int mini = INT_MAX;
        for (int i : coins) {
            int ans = solve(coins, amount - i, dp);
            if (ans != INT_MAX) {
                mini = min(mini, 1 + ans);
            }
        }
        dp[amount] = mini;
        return mini;
    }

    int coinChange(vector<int>& coins, int amount) {
        int mini = INT_MAX;
        vector<int> dp(amount + 1, -1);
        mini = solve(coins, amount, dp);
        return (mini == INT_MAX) ? -1 : mini;
    }
};

------tabulation--------
class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        vector<int> dp(amount + 1, INT_MAX);
        dp[0] = 0;
        for(int i = 1; i <= amount; i++) {
            for(int j = 0; j < coins.size(); j++) {
                if(i - coins[j] >= 0 && dp[i - coins[j]] != INT_MAX) {
                    dp[i] = min(dp[i], 1 + dp[i - coins[j]]);
                }
            }
        }
        return (dp[amount] == INT_MAX) ? -1 : dp[amount];
    }
};