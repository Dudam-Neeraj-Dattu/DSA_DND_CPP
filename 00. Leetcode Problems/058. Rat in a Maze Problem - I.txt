https://www.geeksforgeeks.org/problems/rat-in-a-maze-problem/1

//{ Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function template for C++

class Solution {
  public:
    
    void solve(vector<string> &ans, int row, int col, vector<vector<int>> &mat, string s, vector<vector<int>> &visited) {
        if(row + 1 == mat.size() && col + 1 == mat.size()) {
            ans.push_back(s);
            return;
        }
        if(row + 1 < mat.size()) {
            if(!visited[row + 1][col] && mat[row + 1][col]) {
                visited[row + 1][col] = 1;
                s += 'D';
                solve(ans, row + 1, col, mat, s, visited);
                visited[row + 1][col] = 0;
                s.pop_back();
            }
        }
        if(col + 1 < mat.size()) {
            if(!visited[row][col + 1] && mat[row][col + 1]) {
                visited[row][col + 1] = 1;
                s += 'R';
                solve(ans, row, col + 1, mat, s, visited);
                visited[row][col + 1] = 0;
                s.pop_back();
            }
        }
        if(row - 1 >= 0) {
            if(!visited[row - 1][col] && mat[row - 1][col]) {
                visited[row - 1][col] = 1;
                s += 'U';
                solve(ans, row - 1, col, mat, s, visited);
                visited[row - 1][col] = 0;
                s.pop_back();
            }
        }
        if(col - 1 >= 0) {
            if(!visited[row][col - 1] && mat[row][col - 1]) {
                visited[row][col - 1] = 1;
                s += 'L';
                solve(ans, row, col - 1, mat, s, visited);
                visited[row][col - 1] = 0;
                s.pop_back();
            }
        }
        visited[row][col] = 0;
        
    }
  
    vector<string> findPath(vector<vector<int>> &mat) {
        // Your code goes here
        vector<string> ans;
        if(mat[0][0] == 0) {return ans;}
        vector<vector<int>> visited;
        vector<int> visit(mat.size(), 0);
        for(int i = 0; i < mat.size(); i++) {
            visited.push_back(visit);
        }
        visited[0][0] = 1;
        int row = 0, col = 0;
        string s = "";
        solve(ans, row, col, mat, s, visited);
        return ans;
        
    }
};


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<vector<int>> m(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cin >> m[i][j];
            }
        }
        Solution obj;
        vector<string> result = obj.findPath(m);
        sort(result.begin(), result.end());
        if (result.size() == 0)
            cout << -1;
        else
            for (int i = 0; i < result.size(); i++)
                cout << result[i] << " ";
        cout << endl;
    }
    return 0;
}
// } Driver Code Ends