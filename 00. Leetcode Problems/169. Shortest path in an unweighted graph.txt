https://www.naukri.com/code360/problems/shortest-path-in-an-unweighted-graph_981297

--------approach 1------dfs (TLE)
#include <limits.h>

void dfs(int node, vector<int> adj[], pair<int, int> &distance, vector<int> &visited, vector<int> path, vector<int> &ans, int t) {
	path.push_back(node);
	distance.first++;
	if(node == t) {
		if(distance.first < distance.second) {
			ans.clear();
			for(int i : path) {
				ans.push_back(i);
			}
			distance.second = distance.first;
		}
		return;
	}
	visited[node] = 1;
	for(int i : adj[node]) {
		if(!visited[i]) {
			dfs(i, adj, distance, visited, path, ans, t);
			distance.first--;
		}
	}
	visited[node] = 0;

}

vector<int> shortestPath( vector<pair<int,int>> edges , int n , int m, int s , int t){
	
	vector<int> adj[n];
	for(pair<int, int> p : edges) {
		adj[p.first - 1].push_back(p.second - 1);
		adj[p.second - 1].push_back(p.first - 1);
	}
	vector<int> visited(n, 0);
	queue<int> q;
	// q.push(s);
	// visited[s] = 1;
	vector<int> ans, path;
	pair<int, int> distance = make_pair(0, INT_MAX);
	dfs(s - 1, adj, distance, visited, path, ans, t - 1);
	for(int i = 0; i < ans.size(); i++) {
		ans[i]++;
	}
	return ans;
	
}

-----------approach 2----------bfs

vector<int> shortestPath( vector<pair<int,int>> edges , int n , int m, int s , int t){
	
	vector<int> adj[n];
	for(pair<int, int> p : edges) {
		adj[p.first - 1].push_back(p.second - 1);
		adj[p.second - 1].push_back(p.first - 1);
	}
	vector<int> visited(n, 0), dist(n, -1);
	queue<int> q;
	q.push(s - 1);
	visited[s - 1] = 1;
	dist[s - 1] = 0;	
	while(!q.empty()) {
		int front = q.front();
		q.pop();
		bool target = false;
		for(int i : adj[front]) {
			if(!visited[i]) {
				visited[i] = 1;
				dist[i] = dist[front] + 1;
				q.push(i);
				if(i == t - 1) {
					target = true;
				}
			}
		}
		if(target) {
			break;
		}
	}
	int distance = dist[t - 1];
	vector<int> ans(distance + 1, 0);
	ans[distance] = t - 1;
	distance--;
	int node = t - 1;
	while(distance >= 0) {
		for(int i : adj[node]) {
			if(dist[i] == distance) {
				ans[distance] = i;
				node = i;
				distance--;
				break;
			}
		}
	}

	for(int i = 0; i < ans.size(); i++) {
		ans[i]++;
	}
	return ans;
	
}
