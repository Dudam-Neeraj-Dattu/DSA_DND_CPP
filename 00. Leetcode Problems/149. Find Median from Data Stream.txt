https://leetcode.com/problems/find-median-from-data-stream/description/

class MedianFinder {
public:
    int size;
    double median;
    priority_queue<int> maxHeap;
    priority_queue<int, vector<int>, greater<int>> minHeap;
public:

    int signum(int a, int b) {
        if(a > b) {
            return 1;
        }
        else if(a < b) {
            return -1;
        }
        return 0;
    }

    void adding_element(int num, priority_queue<int> &maxHeap, priority_queue<int, vector<int>, greater<int>> &minHeap, double &median) {
        switch(signum(maxHeap.size(), minHeap.size())) {
            case 0:
                if(num > median) {
                    minHeap.push(num);
                    median = minHeap.top();
                }
                else {
                    maxHeap.push(num);
                    median = maxHeap.top();
                }
                break;
            case 1:
                if(num > median) {
                    minHeap.push(num);
                }
                else {
                    minHeap.push(maxHeap.top());
                    maxHeap.pop();
                    maxHeap.push(num);
                }
                median = (minHeap.top() + maxHeap.top()) / 2.0;
                break;
            case -1:
                if(num > median) {
                    maxHeap.push(minHeap.top());
                    minHeap.pop();
                    minHeap.push(num);
                }
                else {
                    maxHeap.push(num);
                }
                median = (minHeap.top() + maxHeap.top()) / 2.0;
                break;
        }
    }

    MedianFinder() {
        size = 0;
        median = 0.0;
    }
    
    void addNum(int num) {
        adding_element(num, maxHeap, minHeap, median);
    }
    
    double findMedian() {
        return median;
    }
};

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder* obj = new MedianFinder();
 * obj->addNum(num);
 * double param_2 = obj->findMedian();
 */