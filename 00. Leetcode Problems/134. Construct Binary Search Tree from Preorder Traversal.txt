https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/description/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    TreeNode* buildTree(TreeNode *root, vector<int>& preorder, int &preorder_index, vector<int>& inorder, int start, int end) {
        if(start > end) {
            return NULL;
        }
        int index;
        for(int i = start; i <= end; i++) {
            if(inorder[i] == preorder[preorder_index]) {
                index = i;
                break;
            }
        }

        TreeNode *temp = new TreeNode(preorder[preorder_index]);

        root = temp;

        preorder_index++;

        root -> left = buildTree(root -> left, preorder, preorder_index, inorder, start, index - 1);

        root -> right = buildTree(root -> right, preorder, preorder_index, inorder, index + 1, end);
        return root;
    }

    TreeNode* bstFromPreorder(vector<int>& preorder) {
        vector<int> inorder;
        for(int i : preorder) {
            inorder.push_back(i);
        }
        sort(inorder.begin(), inorder.end());
        TreeNode *ans;
        int preorder_index = 0;
        return buildTree(ans, preorder, preorder_index, inorder, 0, inorder.size() - 1);
    }
};