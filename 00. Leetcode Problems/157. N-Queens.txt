https://leetcode.com/problems/n-queens/description/

class Solution {
public:

    vector<string> printLocations(vector<vector<int>> &v, int &n) {
        vector<string> vv;
        for(int i = 0; i < n; i++) {
            string s = "";
            for(int j = 0; j < n; j++) {
                if(v[i][j] == i) {
                    s += 'Q';
                }
                else {
                    s += '.';
                }
            }
            vv.push_back(s);
        }
        return vv;
    }

    void markBlockedLocations(vector<vector<int>> &v, int &row, int &j, int &n) {
        int currRow = row, currCol = j;
        while(1) {
            if(currRow + 1 < n && currCol - 1 >= 0) {
                if(v[currRow + 1][currCol - 1] == n) {v[currRow + 1][currCol - 1] = row;}
                currRow++;
                currCol--;
            }            
            else {
                break;
            }
        }
        currRow = row, currCol = j;
        while(1) {
            if(currRow + 1 < n && currCol + 1 < n) {
                if(v[currRow + 1][currCol + 1] == n) {v[currRow + 1][currCol + 1] = row;}
                currRow++;
                currCol++;
            }            
            else {
                break;
            }
        }
        currRow = row, currCol = j;
        while(1) {
            if(currRow + 1 < n) {
                if(v[currRow + 1][currCol] == n) {v[currRow + 1][currCol] = row;}
                currRow++;
            }            
            else {
                break;
            }
        }
        // for(int i = 0; i < n; i++) {
        //     for(int k = 0; k < n; k++) {
        //         cout << v[i][k] << " ";
        //     }cout << endl;
        // }cout << endl;
    }

    void unMarkBlockedLocations(vector<vector<int>> &v, int &row, int &j, int &n) {
        int currRow = row, currCol = j;
        while(1) {
            if(currRow + 1 < n && currCol - 1 >= 0) {
                if(v[currRow + 1][currCol - 1] == row) {v[currRow + 1][currCol - 1] = n;}
                currRow++;
                currCol--;
            }            
            else {
                break;
            }
        }
        currRow = row, currCol = j;
        while(1) {
            if(currRow + 1 < n && currCol + 1 < n) {
                if(v[currRow + 1][currCol + 1] == row) {v[currRow + 1][currCol + 1] = n;}
                currRow++;
                currCol++;
            }            
            else {
                break;
            }
        }
        currRow = row, currCol = j;
        while(1) {
            if(currRow + 1 < n) {
                if(v[currRow + 1][currCol] == row) {v[currRow + 1][currCol] = n;}
                currRow++;
            }            
            else {
                break;
            }
        }
    }

    void solve(vector<vector<string>> &ans, vector<vector<int>> &v, int n, int row) {
        if(row == n) {
            cout << "came" << endl;
            ans.push_back(printLocations(v, n));
            return;
        }

        for(int j = 0; j < n; j++) {
            if(v[row][j] == n) {
                v[row][j] = row;
                markBlockedLocations(v, row, j, n);
                solve(ans, v, n, row + 1);
                v[row][j] = n;
                unMarkBlockedLocations(v, row, j, n);
            }
        }
    }

    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<vector<int>> v(n, vector<int> (n, n));
        solve(ans, v, n, 0);
        return ans;
    }
};

