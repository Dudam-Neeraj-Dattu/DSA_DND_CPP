https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee

---------brute-------
class Solution {
public:
    int solve(vector<int>& prices, int index, int buy, int fee) {
        if (index == prices.size())
            return 0;

        int profit = 0;
        if (buy) {
            int bought = -prices[index] + solve(prices, index + 1, 0, fee);
            int skipped = solve(prices, index + 1, 1, fee);
            profit = max(bought, skipped);
        } else {
            int sold = prices[index] - fee + solve(prices, index + 1, 1, fee);
            int skipped = solve(prices, index + 1, 0, fee);
            profit = max(sold, skipped);
        }
        return profit;
    }
    int maxProfit(vector<int>& prices, int fee) { return solve(prices, 0, 1, fee); }
};

----------memoisation--------
class Solution {
public:
    int solve(vector<int>& prices, int index, int buy, int fee, vector<vector<int>> &dp) {
        if (index == prices.size())
            return 0;
        if(dp[index][buy] != -1) return dp[index][buy];
        int profit = 0;
        if (buy) {
            int bought = -prices[index] + solve(prices, index + 1, 0, fee, dp);
            int skipped = solve(prices, index + 1, 1, fee, dp);
            profit = max(bought, skipped);
        } else {
            int sold = prices[index] - fee + solve(prices, index + 1, 1, fee, dp);
            int skipped = solve(prices, index + 1, 0, fee, dp);
            profit = max(sold, skipped);
        }
        return dp[index][buy] = profit;
    }
    int maxProfit(vector<int>& prices, int fee) { 
        int n = prices.size();
        vector<vector<int>> dp(n, vector<int> (2, -1));
        return solve(prices, 0, 1, fee, dp); 
    }
};


-----------tabulation--------------
class Solution {
public:
    int maxProfit(vector<int>& prices, int fee) {
        int n = prices.size();
        vector<vector<int>> dp(n + 1, vector<int>(2, 0));

        for (int index = n - 1; index >= 0; index--) {
            for (int buy = 0; buy <= 1; buy++) {
                int profit = 0;
                if (buy) {
                    int bought =
                        -prices[index] + dp[index + 1][0];
                    int skipped = dp[index + 1][1];
                    profit = max(bought, skipped);
                } else {
                    int sold = prices[index] - fee +
                               dp[index + 1][1];
                    int skipped = dp[index + 1][0];
                    profit = max(sold, skipped);
                }
                dp[index][buy] = profit;
            }
        }
        return dp[0][1];
    }
};

----------tabulation1-----------
class Solution {
public:
    int maxProfit(vector<int>& prices, int fee) {
        int n = prices.size();
        vector<int> curr(2, 0);
        vector<int> next(2, 0);
        for (int index = n - 1; index >= 0; index--) {
            for (int buy = 0; buy <= 1; buy++) {
                int profit = 0;
                if (buy) {
                    int bought =
                        -prices[index] + next[0];
                    int skipped = next[1];
                    profit = max(bought, skipped);
                } else {
                    int sold = prices[index] - fee +
                               next[1];
                    int skipped = next[0];
                    profit = max(sold, skipped);
                }
                curr[buy] = profit;
            }
            next = curr;
        }
        return next[1];
    }
};