https://www.geeksforgeeks.org/problems/n-meetings-in-one-room-1587115620/1

--------------solution1-----------
class Solution {
  public: 
    // Function to find the maximum number of meetings that can
    // be performed in a meeting room.
    int maxMeetings(vector<int>& start, vector<int>& end) {
        // Your code here
        vector<pair<int, int>> v;
        for(int i = 0; i < start.size(); i++) {
            v.push_back({start[i], end[i]});
        }
        sort(v.begin(), v.end());
        int n = v.size() - 1;
        int s = v[n].first, e = v[n].second;
        int count = 1;
        for(int i = n - 1; i >= 0; i--) {
            if(v[i].second < s) {
                count++;
                s = v[i].first;
                e = v[i].second;
            }
        }
        return count;
    }
};

----------------solution2-----------------
class Solution {
public:
    // Function to find the maximum number of meetings that can
    // be performed in a meeting room.
    int maxMeetings(vector<int>& start, vector<int>& end) {
        vector<pair<int, int>> meetings;
        
        
        for(int i = 0; i < start.size(); i++) {
            meetings.push_back({start[i], end[i]});
        }

        
        sort(meetings.begin(), meetings.end());

        int count = 1; 
        int last_start_time = meetings.back().first; 

        
        for(int i = meetings.size() - 2; i >= 0; i--) {
            
            if(meetings[i].second < last_start_time) {
                count++; 
                last_start_time = meetings[i].first; 
            }
        }

        return count; 
    }
};
