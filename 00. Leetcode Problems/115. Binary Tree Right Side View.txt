https://leetcode.com/problems/binary-tree-right-side-view/description/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        vector<int> ans;
        map<int, int> m;

        if(root == NULL) {
            return ans;
        }
        queue<pair<TreeNode *, int>> q;
        q.push(make_pair(root, 0));

        while(!q.empty()) {
            m[q.front().second] = q.front().first -> val;
            if(q.front().first -> left) {
                q.push(make_pair(q.front().first -> left, q.front().second + 1));
            }
            if(q.front().first -> right) {
                q.push(make_pair(q.front().first -> right, q.front().second + 1));
            }
            q.pop();
        }

        for(auto i : m) {
            ans.push_back(i.second);
        }

        return ans;
    }
};