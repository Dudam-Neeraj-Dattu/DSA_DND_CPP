https://leetcode.com/problems/merge-two-sorted-lists/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {

private:

    ListNode* solve(ListNode* list1, ListNode* list2) {
        ListNode *curr1 = list1, *next1 = list1 -> next, *curr2 = list2, *next2 = list2 -> next;
        if(next1 == NULL) {
            curr1 -> next = curr2;
            return list1;
        }
        while(next1 && curr2) {
            if(curr1 -> val <= curr2 -> val && curr2 -> val <= next1 -> val) {
                curr1 -> next = curr2;
                next2 = curr2 -> next;
                curr2 -> next = next1;
                curr1 = curr2;
                curr2 = next2;
            }
            else {
                curr1 = next1;
                next1 = next1 -> next;                
                if(next1 == NULL) {
                    curr1 -> next = curr2;
                    return list1;
                }
            }   
        }
        return list1;
    }

public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        if(list1 == NULL && list2) {
            return list2;
        }
        if(list2 == NULL && list1) {
            return list1;
        }
        if(list1 == NULL && list2 == NULL) {
            return NULL;
        }
        return (list1 -> val <= list2 -> val) ? solve(list1, list2) : solve(list2, list1);
       
        // ListNode *p = new ListNode(-1);
        // ListNode *newHead = p;
        // while(curr1 && curr2) {
        //     if(curr1 -> val <= curr2 -> val) {
        //         ListNode *temp = new ListNode(curr1 -> val);
        //         p -> next = temp;
        //         p = p -> next;
        //         curr1 = curr1 -> next; 
        //     }
        //     else {
        //         ListNode *temp = new ListNode(curr2 -> val);
        //         p -> next = temp;
        //         p = temp;
        //         curr2 = curr2 -> next;
        //     }
        // }
        // while(curr1) {
        //     ListNode *temp = new ListNode(curr1 -> val);
        //         p -> next = temp;
        //         p = p -> next;
        //         curr1 = curr1 -> next; 
        // }
        // while(curr2) {
        //     ListNode *temp = new ListNode(curr2 -> val);
        //         p -> next = temp;
        //         p = temp;
        //         curr2 = curr2 -> next;
        // }
        // return newHead->next;
    }
};