https://leetcode.com/problems/design-circular-queue/

class MyCircularQueue {
public:

    int *arr;
    int size;
    int front;
    int rear;

public:
    MyCircularQueue(int k) {
        this -> size = k;
        this -> arr = new int[k];
        for(int i = 0; i < k; i++) {
            arr[i] = -1;
        }
        this -> front = 0;
        this -> rear = 0;
    }
    
    bool enQueue(int value) {
        bool flag = false;
        if(arr[rear] == -1) {
            arr[rear++] = value;                       
            if(rear == size) {
                rear = 0;
            } 
            flag = true;
            return flag;
        }        
        else {
            return flag;
        }        
    }
    
    bool deQueue() {
        if(arr[front] == -1) {
            return false;
        }
        else {
            arr[front] = -1;
            front++;
            if(front == size) {
                front = 0;
            }
            return true;
        }        
    }
    
    int Front() {
        if(arr[front] == -1) {return -1;}
        return arr[front];
    }
    
    int Rear() {        
        if(rear - 1 == -1) {
            if(arr[size - 1] == -1) {return -1;}
            return arr[size - 1];
        }
        else {
            if(arr[rear - 1] == -1) {return -1;}
            return arr[rear - 1];          
        }
    }
    
    bool isEmpty() {
        return (arr[front] == -1 && arr[rear] == -1);
    }
    
    bool isFull() {
        return (arr[front] != -1 && arr[rear] != -1);
    }
};

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */