https://leetcode.com/problems/two-sum-iv-input-is-a-bst/description/

----approach 1-----

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    void traverse(TreeNode *root, vector<int> &v) {
        if(root == NULL) {
            return;
        }

        traverse(root -> left, v);
        v.push_back(root -> val);
        traverse(root -> right, v);
    }

    bool findTarget(TreeNode* root, int k) {
        vector<int> v;
        traverse(root, v);
        for(int i = 0; i < v.size() - 1; i++) {
            for(int j = i + 1; j < v.size(); j++) {
                if(v[i] + v[j] == k) {
                    return true;
                }
            }
        }
        return false;
    }
};



-------approach 2--------

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    void traverse(TreeNode *root, vector<int> &v) {
        if(root == NULL) {
            return;
        }

        traverse(root -> left, v);
        v.push_back(root -> val);
        traverse(root -> right, v);
    }

    bool findTarget(TreeNode* root, int k) {
        vector<int> v;
        traverse(root, v);
        int i = 0, j = v.size() - 1;
        while(i < j) {
            if(v[i] + v[j] == k) {
                return true;
            }
            else if(v[i] + v[j] > k) {
                j--;
            }
            else {
                i++;
            }
        }
        return false;
    }
};