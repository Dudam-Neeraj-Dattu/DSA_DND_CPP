https://leetcode.com/problems/maximal-square

--------brute of brute-------
class Solution {
public:

    bool hasValidSize(vector<vector<char>> &matrix, int size) {        
        for(int i = 0; i <= matrix.size() - size; i++) {
            for(int j = 0; j <= matrix[0].size() - size; j++) {
                int count = 0;
                for(int x = i; x < (i + size); x++) {
                    for(int y = j; y < (j + size); y++) {
                        if(matrix[x][y] == '1') {
                            count++;
                        }
                    }
                }
                if(count == size * size) {
                    return true;
                }
            }            
        }     
        return false;   
    }

    int maximalSquare(vector<vector<char>>& matrix) {
        int maxSize = min(matrix.size(), matrix[0].size());
        int ans = 0;
        for(int i = 1; i <= maxSize; i++) {
            if(hasValidSize(matrix, i)) {
                ans = i * i;
            }
        }
        return ans;
    }
};


--------brute----------
class Solution {
public:
    bool hasValidSize(vector<vector<char>>& matrix, int size,
                      vector<vector<vector<bool>>>& dp) {
        bool ans = false;
        for (int i = 0; i <= matrix.size() - size; i++) {
            for (int j = 0; j <= matrix[0].size() - size; j++) {
                int count = 0;
                if (dp[i][j][size - 1]) {
                    for (int x = i; x < (i + size); x++) {
                        for (int y = j; y < (j + size); y++) {
                            if (matrix[x][y] == '1') {
                                count++;
                            }
                        }
                    }
                }                
                if (count == size * size) {
                    ans = true;
                    dp[i][j][size] = true;
                }
            }
        }
        return ans;
    }

    int maximalSquare(vector<vector<char>>& matrix) {
        int maxSize = min(matrix.size(), matrix[0].size());
        int ans = 0;
        vector<vector<vector<bool>>> dp(
            matrix.size(),
            vector<vector<bool>>(matrix[0].size(),
                                 vector<bool>(maxSize + 1, false)));
        for (int i = 0; i < matrix.size(); i++) {
            for (int j = 0; j < matrix[0].size(); j++) {
                dp[i][j][0] = true;
            }
        }
        for (int i = 1; i <= maxSize; i++) {
            if (hasValidSize(matrix, i, dp)) {
                ans = i * i;
            }
        }
        return ans;
    }
};

----------recursive brute----------
class Solution {
public:

    int solve(vector<vector<char>>& matrix, int i, int j, int &maxi) {
        if(i >= matrix.size() || j >= matrix[0].size()) {
            return 0;
        }

        int right = solve(matrix, i, j + 1, maxi);
        int diag = solve(matrix, i + 1, j + 1, maxi);
        int down = solve(matrix, i + 1, j, maxi);

        if(matrix[i][j] == '1') {
            int ans = 1 + min(right, min(diag, down));
            maxi = max(ans, maxi);
            return ans;
        }
        else {
            return 0;
        }
    }

    int maximalSquare(vector<vector<char>>& matrix) {
        int maxi = 0;
        solve(matrix, 0, 0, maxi);
        return maxi * maxi;
    }
};


-------------memoisation--------
class Solution {
public:

    int solve(vector<vector<char>>& matrix, int i, int j, int &maxi, vector<vector<int>> &dp) {
        if(i >= matrix.size() || j >= matrix[0].size()) {
            return 0;
        }

        if(dp[i][j] != -1) {
            return dp[i][j];
        }

        int right = solve(matrix, i, j + 1, maxi, dp);
        int diag = solve(matrix, i + 1, j + 1, maxi, dp);
        int down = solve(matrix, i + 1, j, maxi, dp);

        if(matrix[i][j] == '1') {
            dp[i][j] = 1 + min(right, min(diag, down));
            maxi = max(dp[i][j], maxi);
            return dp[i][j];
        }
        else {
            return dp[i][j] = 0;
        }
    }

    int maximalSquare(vector<vector<char>>& matrix) {
        int maxi = 0;
        vector<vector<int>> dp(matrix.size(), vector<int> (matrix[0].size(), -1));
        solve(matrix, 0, 0, maxi, dp);
        return maxi * maxi;
    }
};

