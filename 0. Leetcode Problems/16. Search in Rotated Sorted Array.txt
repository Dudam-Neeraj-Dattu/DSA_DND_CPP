https://leetcode.com/problems/search-in-rotated-sorted-array/

class Solution {
public:
    int binarySearch(vector<int>& nums, int target, int start, int end) {
        while(start <= end) {
            int mid = (start + end) / 2;
            if(nums[mid] == target) {
                return mid;
            }
            else if(nums[mid] < target) {
                start = mid + 1;
            }
            else {
                end = mid - 1;
            }
        }
        return -1;
    }
    
    int search(vector<int>& nums, int target) {
        int start = 0, end = nums.size() - 1, mid;
        while(start < end) {
            mid = (start + end) / 2;
            if(nums[mid] >= nums[0]) {
                start = mid + 1;
            }
            else{
                end = mid;
            }
        }
        cout << start << " " << mid << " " << end;
        // if(start == 0 || start == nums.size() - 1) {
        //     return binarySearch(nums, target, 0, nums.size() - 1);
        // }
        if(nums[start] == target) {
            return start;
        }
        else if(nums[0] == target) {
            return 0;
        }
        else if(nums[nums.size() - 1] == target) {
            return nums.size() - 1;
        }
        else if(nums[0] < target) {
            return binarySearch(nums, target, 0, start);
        } 
        else if(nums[nums.size() - 1] > target) {
            return binarySearch(nums, target, start, nums.size() - 1);
        }        
        return -1;
    }
};