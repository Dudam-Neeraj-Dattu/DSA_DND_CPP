https://leetcode.com/problems/reverse-nodes-in-k-group/description/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

    int getlength(ListNode*head,int k){
        int c=0;
        while(head!=NULL){
            c++;
            head=head->next;

        }
        return c;

    }

    ListNode* reverseKGroup(ListNode* head, int k) {
        if(head == NULL) {
            return NULL;
        }

        ListNode *prev = NULL, *next = NULL, *curr = head;

        int count = 0;

        while(curr != NULL && count < k) {
            next = curr -> next;
            curr -> next = prev;
            prev = curr;
            curr = next;
            count++;
        }

        if(next!=NULL ){        
            if(getlength(next,k)>=k){
                head->next = reverseKGroup(next, k);
            }
            else{
                head->next=next;
            }
        }   
        return prev;
    }
};